#!/usr/bin/env python3
"""
Complete Environment Configuration for MatchGen
This script helps you configure all the necessary environment variables.
"""

import secrets
import string
import os
from pathlib import Path

def generate_secret_key():
    """Generate a secure Django secret key."""
    chars = string.ascii_letters + string.digits + '!@#$%^&*(-_=+)'
    return ''.join(secrets.choice(chars) for _ in range(50))

def get_user_input():
    """Get configuration from user."""
    print("üöÄ MatchGen Environment Configuration")
    print("=" * 50)
    
    config = {}
    
    # Email Configuration
    print("\nüìß Email Configuration")
    print("Choose your email provider:")
    print("1. Gmail (Recommended)")
    print("2. Outlook")
    print("3. Yahoo")
    print("4. Custom SMTP")
    
    email_choice = input("Enter choice (1-4): ").strip()
    
    if email_choice == "1":
        config['EMAIL_HOST'] = 'smtp.gmail.com'
        config['EMAIL_PORT'] = '587'
        config['EMAIL_USE_TLS'] = 'True'
    elif email_choice == "2":
        config['EMAIL_HOST'] = 'smtp-mail.outlook.com'
        config['EMAIL_PORT'] = '587'
        config['EMAIL_USE_TLS'] = 'True'
    elif email_choice == "3":
        config['EMAIL_HOST'] = 'smtp.mail.yahoo.com'
        config['EMAIL_PORT'] = '587'
        config['EMAIL_USE_TLS'] = 'True'
    else:
        config['EMAIL_HOST'] = input("Enter SMTP host: ").strip()
        config['EMAIL_PORT'] = input("Enter SMTP port (usually 587): ").strip() or '587'
        config['EMAIL_USE_TLS'] = input("Use TLS? (True/False): ").strip() or 'True'
    
    config['EMAIL_HOST_USER'] = input("Enter your email address: ").strip()
    config['EMAIL_HOST_PASSWORD'] = input("Enter your email password/app password: ").strip()
    config['DEFAULT_FROM_EMAIL'] = config['EMAIL_HOST_USER']
    
    # Frontend URL
    print("\nüåê Frontend Configuration")
    config['FRONTEND_URL'] = input("Enter your frontend URL (e.g., http://localhost:3000): ").strip()
    if not config['FRONTEND_URL']:
        config['FRONTEND_URL'] = 'http://localhost:3000'
    
    # Database
    print("\nüóÑÔ∏è Database Configuration")
    print("1. SQLite (Local development)")
    print("2. PostgreSQL (Production)")
    
    db_choice = input("Enter choice (1-2): ").strip()
    if db_choice == "2":
        config['DATABASE_URL'] = input("Enter PostgreSQL URL: ").strip()
    else:
        config['DATABASE_URL'] = 'sqlite:///db.sqlite3'
    
    # Secret Key
    print("\nüîê Security Configuration")
    config['SECRET_KEY'] = generate_secret_key()
    print(f"‚úÖ Generated secure secret key")
    
    # Debug Mode
    debug_choice = input("Enable debug mode? (y/n): ").strip().lower()
    config['DEBUG'] = 'True' if debug_choice == 'y' else 'False'
    
    # Allowed Hosts
    print("\nüåç Allowed Hosts")
    hosts = input("Enter allowed hosts (comma-separated, e.g., localhost,127.0.0.1,yourdomain.com): ").strip()
    if not hosts:
        hosts = 'localhost,127.0.0.1'
    config['ALLOWED_HOSTS'] = hosts
    
    # CORS
    print("\nüîó CORS Configuration")
    cors_origins = input("Enter CORS allowed origins (comma-separated): ").strip()
    if not cors_origins:
        cors_origins = config['FRONTEND_URL']
    config['CORS_ALLOWED_ORIGINS'] = cors_origins
    
    return config

def create_env_file(config):
    """Create the .env file with the configuration."""
    
    env_content = f"""# MatchGen Backend Environment Configuration
# Generated by configure_env.py

# Email Configuration
EMAIL_HOST={config['EMAIL_HOST']}
EMAIL_PORT={config['EMAIL_PORT']}
EMAIL_USE_TLS={config['EMAIL_USE_TLS']}
EMAIL_HOST_USER={config['EMAIL_HOST_USER']}
EMAIL_HOST_PASSWORD={config['EMAIL_HOST_PASSWORD']}
DEFAULT_FROM_EMAIL={config['DEFAULT_FROM_EMAIL']}

# Frontend URL
FRONTEND_URL={config['FRONTEND_URL']}

# Database Configuration
DATABASE_URL={config['DATABASE_URL']}

# Secret Key
SECRET_KEY={config['SECRET_KEY']}

# Debug Mode
DEBUG={config['DEBUG']}

# Allowed Hosts
ALLOWED_HOSTS={config['ALLOWED_HOSTS']}

# CORS Settings
CORS_ALLOWED_ORIGINS={config['CORS_ALLOWED_ORIGINS']}

# Security Settings
SECURE_SSL_REDIRECT=False
SECURE_HSTS_SECONDS=0
SECURE_HSTS_INCLUDE_SUBDOMAINS=False
SECURE_HSTS_PRELOAD=False
"""
    
    # Write to env_config.txt (user will rename to .env)
    env_path = Path("matchgen-backend") / "env_config.txt"
    
    try:
        with open(env_path, 'w') as f:
            f.write(env_content)
        
        print(f"\n‚úÖ Environment configuration created at {env_path}")
        print("\nüìã Next Steps:")
        print("1. Rename 'env_config.txt' to '.env'")
        print("2. Restart your Django server")
        print("3. Test email functionality")
        
        if config['EMAIL_HOST'] == 'smtp.gmail.com':
            print("\nüí° Gmail Setup Reminder:")
            print("- Enable 2-Factor Authentication")
            print("- Generate an App Password")
            print("- Use the App Password (not your regular password)")
        
    except Exception as e:
        print(f"‚ùå Error creating configuration file: {e}")

def main():
    """Main configuration function."""
    try:
        config = get_user_input()
        create_env_file(config)
        
        print("\nüéâ Configuration complete!")
        print("Your MatchGen backend is ready to use email verification!")
        
    except KeyboardInterrupt:
        print("\n\n‚ùå Configuration cancelled by user")
    except Exception as e:
        print(f"\n‚ùå Error during configuration: {e}")

if __name__ == "__main__":
    main()






